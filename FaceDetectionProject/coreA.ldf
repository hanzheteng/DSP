/*
** LDF for adsp-BF561
** 
** There are a number of configuration options that can be specified
** either by compiler flags, or by linker flags directly. The options are:
** 
** USE_PROFILER0
** 	Enabled by -p. Link in profiling library, and write results to
** 	both stdout and mon.out.
** USE_PROFILER1
** 	Enabled by -p1. Only write profiling data to mon.out.
** USE_PROFILER2
** 	Enabled by -p2. Only write profiling data to stdout.
** __WORKAROUNDS_ENABLED
**    Defined by compiler when -workaround is used to direct LDF to
**    link with libraries that have been built with work-arounds
**    enabled.
** USE_FILEIO
**	   Always defined; enables the File I/O Support, which is necessary
**	   for printf() to produce any output.
** USER_CRT
**   Specifies a custom or System Builder generated CRT object to use.
** _ADI_LIBIO
**   Use the ADI io library (default and fast)
** _DINKUM_IO
**   Use dinkum io library (slower but more compatible). Enabled
**   by the flag -full-io
** COREA
**	   Build a DXE for Core A (default)
** COREB
**	   Build a DXE for Core B
** 
*/

ARCHITECTURE(ADSP-BF561)

#ifndef __NO_STD_LIB
SEARCH_DIR( $ADI_DSP/Blackfin/lib )
#endif

# if defined(USE_INSTRUCTION_CACHE) || \
     defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE)
#  define USE_CACHE_PARTS 1
# else
#  define USE_CACHE_PARTS 0
#endif

#define INSTR_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_INSTRUCTION_CACHE) || !USE_CACHE_PARTS ) ) )

#define DATAA_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE) || \
         !USE_CACHE_PARTS ) ) )

#define DATAB_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_DATA_B_CACHE) || !USE_CACHE_PARTS ) ) )

# if defined(USE_INSTRUCTION_CACHE) || \
     defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE)
#  define USE_CACHE_PARTS 1
# else
#  define USE_CACHE_PARTS 0
#endif

#if !defined(COREA) && !defined(COREB)
#define COREA
#endif

#if defined(USE_PROFILER0) || \
    defined(USE_PROFILER1) || \
    defined(USE_PROFILER2)
#  if !defined(USE_PROFILER)
#    define USE_PROFILER
#  endif
   // The profiler needs File I/O to write its results.
#  define USE_FILEIO 1
#else
#  define PROFFLAG
#endif

#ifndef USE_FILEIO   /* { */
#define USE_FILEIO 1
#endif   /* } */

#ifdef USE_PROFILER0	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define PROFFLAG , prfflg0_561y.doj
#else
#define PROFFLAG , prfflg0_561.doj
#endif	/* } */
#endif	/* } */

#ifdef USE_PROFILER1	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define PROFFLAG , prfflg1_561y.doj
#else
#define PROFFLAG , prfflg1_561.doj
#endif	/* } */
#endif	/* } */

#ifdef USE_PROFILER2	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define PROFFLAG , prfflg2_561y.doj
#else
#define PROFFLAG , prfflg2_561.doj
#endif	/* } */
#endif	/* } */

#ifdef __WORKAROUNDS_ENABLED	/* { */
#define OMEGA idle561y.doj
#else
#define OMEGA idle561.doj
#endif	/* } */

#define MEMINIT __initsbsz561.doj,
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define LIBSMALL libsmall561y.dlb,
#define FLT64  libf64ieee561y.dlb
#else
#define LIBSMALL libsmall561.dlb,
#define FLT64  libf64ieee561.dlb
#endif	/* } */

#ifdef M3_RESERVED	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define LIBM3 libm3res561y.dlb
#define LIBDSP libdspm3res561y.dlb
#define SFTFLT libsftflt561y.dlb
#else
#define LIBM3 libm3res561.dlb
#define LIBDSP libdspm3res561.dlb
#define SFTFLT libsftflt561.dlb
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define LIBM3 libm3free561y.dlb
#define LIBDSP libdsp561y.dlb
#define SFTFLT libsftflt561y.dlb
#else
#define LIBM3 libm3free561.dlb
#define LIBDSP libdsp561.dlb
#define SFTFLT libsftflt561.dlb
#endif	/* } */
#endif	/* } */

#ifdef IEEEFP	/* { */
#define FPLIBS SFTFLT, FLT64, LIBDSP
#else
#define FPLIBS FLT64, LIBDSP, SFTFLT
#endif	/* } */


#ifdef __ADI_MULTICORE
#ifdef __WORKAROUNDS_ENABLED
#define MC_DATA mc_data561y.doj
#ifdef _DINKUM_IO
#define MC_LIBS libmc561y.dlb, libc561mty.dlb, librt_fileio561mty.dlb, libio561_mty.dlb
#else //_DINKUM_IO
#define MC_LIBS libio561_mty.dlb, libmc561y.dlb, libc561mty.dlb
#endif
#else //__WORKAROUNDS_ENABLED
#define MC_DATA mc_data561.doj
#ifdef _DINKUM_IO
#define MC_LIBS libmc561.dlb, libc561mt.dlb, librt_fileio561mt.dlb, libio561_mt.dlb
#else //_DINKUM_IO
#define MC_LIBS libio561_mt.dlb, libmc561.dlb, libc561mt.dlb
#endif
#endif
#endif

#ifdef __ADI_MULTICORE
#ifdef __WORKAROUNDS_ENABLED	/* { */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mty.dlb, libx561mty.dlb, libio561_mty.dlb, libcpp561mtyx.dlb, libcpprt561mtyx.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mty.dlb, libx561mty.dlb, libio561_mty.dlb, libcpp561mty.dlb, libcpprt561mty.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#endif /* __ADI_LIBEH__ */
#else /* __WORKAROUNDS_ENABLED */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mt.dlb, libx561mt.dlb, libio561_mt.dlb, libcpp561xmt.dlb, libcpprt561xmt.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mt.dlb, libx561mt.dlb, libio561_mt.dlb, libcpp561mt.dlb, libcpprt561mt.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#endif /* } __ADI_LIBEH__ */
#endif	/* }  __WORKAROUNDS_ENABLED */

#else /* __ADI_MULTICORE */

#ifdef __WORKAROUNDS_ENABLED
#ifdef _DINKUM_IO
#define LIBC libc561y.dlb, librt_fileio561y.dlb, libio561y.dlb,
#else //_DINKUM_IO
#define LIBC libio561y.dlb, libc561y.dlb,
#endif
#else //__WORKAROUNDS_ENABLED
#ifdef _DINKUM_IO
#define LIBC libc561.dlb, librt_fileio561.dlb, libio561.dlb,
#else //_DINKUM_IO
#define LIBC libio561.dlb, libc561.dlb,
#endif
#endif

#ifdef __WORKAROUNDS_ENABLED	/* { */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561y.dlb, libx561y.dlb, libcpp561yx.dlb, libcpprt561yx.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561y.dlb, libx561y.dlb, libcpp561y.dlb, libcpprt561y.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#endif /* __ADI_LIBEH__ */
#else /* __WORKAROUNDS_ENABLED */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561.dlb, libx561.dlb, libcpp561x.dlb, libcpprt561x.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561.dlb, libx561.dlb, libcpp561.dlb, libcpprt561.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#endif /* } __ADI_LIBEH__ */
#endif	/* }  __WORKAROUNDS_ENABLED */
#endif      /* __ADI_MULTICORE */

#if defined(USE_FILEIO) || defined(USE_PROFGUIDE)
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define RTLIB librt_fileio561y.dlb
#else
#define RTLIB librt_fileio561.dlb
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define RTLIB librt561y.dlb
#else
#define RTLIB librt561.dlb
#endif	/* } */
#endif	/* } */
#if defined(__ADI_MULTICORE)
$LIBRARIES = MC_DATA, MC_LIBS, LIBS, RTLIB;
#else
$LIBRARIES = LIBS, RTLIB;
#endif

// Libraries from the command line are included in COMMAND_LINE_OBJECTS.

// If USER_CRT is defined to be a custom/SystemBuilder generated
// CRT file then link with that, otherwise determine which of the
// precompiled objects to use.
#ifdef USER_CRT /* { */
#ifdef __WORKAROUNDS_ENABLED /* { */
#define CRT USER_CRT, libprofile561y.dlb PROFFLAG
#else
#define CRT USER_CRT, libprofile561.dlb PROFFLAG
#endif /* } */
#else
#ifdef USE_PROFILER	/* { */
#ifdef USE_FILEIO	/* { */
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtsfpc561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtsfpc561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtsfp561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtsfp561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#endif  /* __cplusplus */	/* } */
#else
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtscp561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtscp561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtsp561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtsp561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#endif  /* __cplusplus */	/* } */
#endif  /* USE_FILEIO */	/* } */
#else
#ifdef USE_FILEIO	/* { */
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT  crtsfc561y.doj
#else
#define CRT  crtsfc561.doj
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT  crtsf561y.doj
#else
#define CRT  crtsf561.doj
#endif	/* } */
#endif /* __cplusplus */	/* } */
#else
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT  crtsc561y.doj
#else
#define CRT  crtsc561.doj
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT	crts561y.doj
#else
#define CRT	crts561.doj
#endif	/* } */
#endif /* __cplusplus */	/* } */
#endif  /* USE_FILEIO */	/* } */
#endif  /* USE_PROFILER */	/* } */
#endif /* USER_CRT } */

#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define ENDCRT , crtn561y.doj
#else
#define ENDCRT , crtn561.doj
#endif	/* } */
#else
#define ENDCRT
#endif	/* } */
#ifdef COREB /* { */
$OBJECTS = CRT, $COMMAND_LINE_OBJECTS ,cplbtab561b.doj ENDCRT;
#else
$OBJECTS = CRT, $COMMAND_LINE_OBJECTS ,cplbtab561a.doj ENDCRT;
#endif /* COREB } */


MEMORY
{
/* ----- Core A ----- */
MEM_A_L1_SCRATCH {	/* L1 Scratchpad - 4K */
	TYPE(RAM) WIDTH(8)
	START(0xFFB00000) END(0xFFB00FFF)
}
MEM_A_L1_CODE_CACHE  {	/* Instruction SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFFA10000) END(0xFFA13FFF)
}
MEM_A_L1_CODE {		/* Instruction SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFFA00000) END(0xFFA03FFF)
}
#if DATAB_CACHE /* { */
MEM_A_L1_DATA_B_CACHE {	/* Data Bank B SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF904000) END(0xFF907FFF)
}
MEM_A_L1_DATA_B   {		/* Data Bank B SRAM - 12K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF901000) END(0xFF903FFF)
}
#else  /* } { DATAB_CACHE */
MEM_A_L1_DATA_B   {		/* Data Bank B SRAM - 28K of 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF901000) END(0xFF907FFF)
}
#endif /* } DATAB_CACHE */
MEM_A_L1_STACK    {		/* Data Bank B SRAM - 4K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF900000) END(0xFF900FFF)
}
#if DATAA_CACHE /* { */
MEM_A_L1_DATA_A_CACHE {	/* Data Bank A SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF804000) END(0xFF807FFF)
}
MEM_A_L1_DATA_A   {		/* Data Bank A SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF800000) END(0xFF803FFF)
}
#else  /* } { DATAA_CACHE */
MEM_A_L1_DATA_A   {		/* Data Bank A SRAM - 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF800000) END(0xFF807FFF)
}
#endif /* } DATAA_CACHE */

/* ----- Core B ----- */
MEM_B_L1_SCRATCH {		/* L1 Scratchpad - 4K */
	TYPE(RAM) WIDTH(8)
	START(0xFF700000) END(0xFF700FFF)
}
MEM_B_L1_CODE_CACHE  {	/* L1 Instruction SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF610000) END(0xFF613FFF)
}
MEM_B_L1_CODE {		/* L1 Instruction SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF600000) END(0xFF603FFF)
}
#if DATAB_CACHE /* { */
MEM_B_L1_DATA_B_CACHE {	/* L1 Data Bank B SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF504000) END(0xFF507FFF)
}
MEM_B_L1_DATA_B   {		/* L1 Data Bank B SRAM - 12K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF501000) END(0xFF503FFF)
}
#else  /* } { DATAB_CACHE */
MEM_B_L1_DATA_B   {		/* L1 Data Bank B SRAM - 28K of 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF501000) END(0xFF507FFF)
}
#endif /* } DATAB_CACHE */
MEM_B_L1_STACK    {		/* L1 Data Bank B SRAM - 4K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF500000) END(0xFF500FFF)
}
#if DATAA_CACHE /* { */
MEM_B_L1_DATA_A_CACHE {	/* L1 Data Bank A SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF404000) END(0xFF407FFF)
}
MEM_B_L1_DATA_A   {		/* L1 Data Bank A SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF400000) END(0xFF403FFF)
}
#else  /* } { DATAA_CACHE */
MEM_B_L1_DATA_A   {		/* L1 Data Bank A SRAM - 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF400000) END(0xFF407FFF)
}
#endif /* } DATAA_CACHE */

/* L2 SRAM - 128K. */
/* For convenience, we divide this space into: */
/* Core B only - 32K */
/* Core A only - 32K */
/* Shared = 64K */
/* And then subdivide each core-only area for program layout. */

/* Core B only - FEB00000 to FEB07FFF */
#ifdef IDDE_ARGS /* { */
#define ARGV_START 0xFEB07F00
MEM_ARGV_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB07F00) END(0xFEB07FFF)
}
#ifndef USE_CACHE /* { */
MEM_L2_HEAP_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB04000) END(0xFEB07EFF)
}
MEM_L2_SRAM_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB00000) END(0xFEB03FFF)
}
#else /* } USE_CACHE { */
MEM_L2_SRAM_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB00000) END(0xFEB07EFF)
}
#endif /* } USE_CACHE */
#else
#ifndef USE_CACHE /* { */
MEM_L2_HEAP_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB04000) END(0xFEB07FFF)
}
MEM_L2_SRAM_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB00000) END(0xFEB03FFF)
}
#else /* } USE_CACHE { */
MEM_L2_SRAM_B     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB00000) END(0xFEB07FFF)
}
#endif /* } USE_CACHE */
#endif /* IDDE_ARGS } */
/* Core A only - FEB08000 to FEB0FFFF */
#ifdef IDDE_ARGS /* { */
#ifndef ARGV_START
#define ARGV_START 0xFEB0FF00
#endif
MEM_ARGV_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB0FF00) END(0xFEB0FFFF)
}
#ifndef USE_CACHE /* { */
MEM_L2_HEAP_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB0C000) END(0xFEB0FEFF)
}
MEM_L2_SRAM_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB08000) END(0xFEB0BFFF)
}
#else /* } USE_CACHE { */
MEM_L2_SRAM_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB08000) END(0xFEB0FEFF)
}
#endif /* } USE_CACHE */
#else
#ifndef USE_CACHE
MEM_L2_HEAP_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB0C000) END(0xFEB0FFFF)
}
MEM_L2_SRAM_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB08000) END(0xFEB0BFFF)
}
#else /* } USE_CACHE { */
MEM_L2_SRAM_A     {
	TYPE(RAM) WIDTH(8)
	START(0xFEB08000) END(0xFEB0FFFF)
}
#endif /* } USE_CACHE */
#endif /* IDDE_ARGS } */
/* Shared L2 */
MEM_L2_SRAM    { START(0xFEB10000) END(0xFEB1FFFF) TYPE(RAM) WIDTH(8) }
 /* Async Memory in Banks of 64 MB */
MEM_ASYNC3     { START(0x2C000000) END(0x2FFFFFFF) TYPE(RAM) WIDTH(8) }
MEM_ASYNC2     { START(0x28000000) END(0x2BFFFFFF) TYPE(RAM) WIDTH(8) }
MEM_ASYNC1     { START(0x24000000) END(0x27FFFFFF) TYPE(RAM) WIDTH(8) }
MEM_ASYNC0     { START(0x20000000) END(0x23FFFFFF) TYPE(RAM) WIDTH(8) }

/* SDRAM Partitioning:
   SDRAM for BF561 is available in up to 128MB in 4 External Banks.
   Each external bank consists of 4 internal banks.
   The EBUI SDRAM Controller can hold open up to 4 internal banks 
   open synchronously. Suitable partitioning that avoids placing
   data and program in the same internal bank can improve performance.
   The default LDF contains a configuration for two external banks
   each holding 32MB SDRAM. The default LDF uses one bank per core,
   partitioned to segment data and program.
  */

  /* Bank usage:
        Bank 0 - 8MB/core - Heap 
        Bank 1 - 8MB/core - Data
        Bank 2 - 8MB/core - Data/BSZ
        Bank 3 - 8MB Core A, 4MB Core B - Program
                             4MB shared - misc
  */
#if !defined(PARTITION_EZKIT_SDRAM)
# define PARTITION_EZKIT_SDRAM
#endif
  /* Core A */
MEM_SDRAM0_BANK0     { START(0x00000004) END(0x007FFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM0_BANK1     { START(0x00800000) END(0x00FFFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM0_BANK2     { START(0x01000000) END(0x017FFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM0_BANK3     { START(0x01800000) END(0x01FFFFFF) TYPE(RAM) WIDTH(8) }
  /* Core B */
MEM_SDRAM1_BANK0     { START(0x02000000) END(0x027FFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM1_BANK1     { START(0x02800000) END(0x02FFFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM1_BANK2     { START(0x03000000) END(0x037FFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM1_BANK3     { START(0x03800000) END(0x03CFFFFF) TYPE(RAM) WIDTH(8) }
 /* shared srdam */
MEM_SDRAM1_SHARED    { START(0x03D00000) END(0x03FFFFFF) TYPE(RAM) WIDTH(8) }
}

/* Core A */
#ifdef COREA
PROCESSOR p0
{
    OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

    /* Following address must match start of MEM_A_L1_CODE */
    RESOLVE(start,0xFFA00000)
#ifdef IDDE_ARGS
    RESOLVE(___argv_string,ARGV_START)
#endif
    KEEP(start,_main)

    SECTIONS
    {
#if defined(__WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES) /* { */
    /* Workaround for hardware errata 05-00-0189 -
    ** "Speculative (and fetches made at boundary of reserved memory
    ** space) for instruction or data fetches may cause false
    ** protection exceptions".
    **
    ** Done by avoiding use of 76 bytes from at the end of blocks
    ** that are adjacent to reserved memory. Workaround is enabled
    ** for appropriate silicon revisions (-si-revision switch).
    */
    RESERVE(___waba0=0xFFB00FFF - 75,___la0=76)   /* scratchpad */
#  if !INSTR_CACHE
    RESERVE(___waba1=0xFFA13FFF - 75,___la1=76)   /* l1 instr sram/cache */
#  endif
    RESERVE(___waba2=0xFFA03FFF - 75,___la2=76)   /* l1 instr sram */
#  if DATAB_CACHE
    RESERVE(___waba3=0xFF903FFF - 75,___la3=76)   /* data B sram */
#  else
    RESERVE(___waba4=0xFF907FFF - 75,___la4=76)   /* data B sram/cache */
#  endif
#  if DATAA_CACHE
    RESERVE(___waba5=0xFF803FFF - 75,___la5=76)   /* data A sram */
#  else
    RESERVE(___waba6=0xFF807FFF - 75,___la6=76)   /* data A sram/cache */
#  endif
    RESERVE(___waba7=0xFEB1FFFF - 75,___la7=76)   /* L2 sram */
    RESERVE(___waba8=0x2FFFFFFF - 75,___la8=76)   /* async bank 3 */
#  if defined(PARTITION_EZKIT_SDRAM)
    RESERVE(___waba9=0x3FFFFFF - 75,___la9=76)    /* EZ-Kit 64MB sdram */
#  elif defined(USE_CACHE) || defined(USE_SDRAM)
    RESERVE(___waba10=0x7FFFFFF - 75,___la10=76)  /* sdram 218MB */
#  endif
#else 
    /* FEB1FC00->FEB1FFFF : Reseved in boot Phase for 2nd stage boot loader */
    RESERVE(___ssld=0xFEB1FC00,___lssld=0x400) 
#endif /*} __WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES */

        l1_code {
            INPUT_SECTION_ALIGN(4)
            __CORE = 0;
            INPUT_SECTIONS( $OBJECTS(L1_code) $LIBRARIES(L1_code))
            INPUT_SECTIONS( $OBJECTS(cplb) $LIBRARIES(cplb))
            INPUT_SECTIONS( $OBJECTS(cplb_code) $LIBRARIES(cplb_code))
            INPUT_SECTIONS( $OBJECTS(noncache_code) $LIBRARIES(noncache_code))
            INPUT_SECTIONS( $OBJECTS(program) $LIBRARIES(program))
        } >MEM_A_L1_CODE

        l1_code_cache {
#if INSTR_CACHE /* { */
            ___l1_code_cache = 1;
#else
            ___l1_code_cache = 0;
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(L1_code) $LIBRARIES(L1_code))
            INPUT_SECTIONS( $OBJECTS(cplb) $LIBRARIES(cplb))
            INPUT_SECTIONS( $OBJECTS(cplb_code) $LIBRARIES(cplb_code))
            INPUT_SECTIONS( $OBJECTS(program) $LIBRARIES(program))
#endif /* INSTR_CACHE } */
        } >MEM_A_L1_CODE_CACHE

#if DATAA_CACHE /* { */
        l1_data_a_cache {
            INPUT_SECTION_ALIGN(4)
            ___l1_data_cache_a = 1;
        } >MEM_A_L1_DATA_A_CACHE
#endif /* DATAA_CACHE } */

        l1_data_a {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(L1_data_a) $LIBRARIES(L1_data_a))
#if !DATAA_CACHE /* { */
            ___l1_data_cache_a = 0;
#endif /* DATAA_CACHE } */
            INPUT_SECTIONS( $OBJECTS(cplb_data) $LIBRARIES(cplb_data))
            INPUT_SECTIONS( $OBJECTS(voldata) $LIBRARIES(voldata))
            INPUT_SECTIONS( $OBJECTS(data1) $LIBRARIES(data1))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS(.edt) $LIBRARIES(.edt) )
            INPUT_SECTIONS( $OBJECTS(.cht) $LIBRARIES(.cht) )
#endif
            INPUT_SECTIONS( $OBJECTS(constdata) $LIBRARIES(constdata))
        } >MEM_A_L1_DATA_A

        bsz_L1_data_a ZERO_INIT {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(bsz) $LIBRARIES(bsz))
        } >MEM_A_L1_DATA_A

#if DATAB_CACHE /* { */
        l1_data_b_cache {
            INPUT_SECTION_ALIGN(4)
            ___l1_data_cache_b = 1;
        } >MEM_A_L1_DATA_B_CACHE
#endif /* DATAB_CACHE } */

        l1_data_b {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(L1_data_b) $LIBRARIES(L1_data_b))
#if !DATAB_CACHE /* { */
            ___l1_data_cache_b = 0;
#endif /* DATAB_CACHE } */
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS(ctor) $LIBRARIES(ctor) )
            INPUT_SECTIONS( $OBJECTS(ctorl) $LIBRARIES(ctorl) )
            INPUT_SECTIONS( $OBJECTS(.gdt) $LIBRARIES(.gdt) )
            INPUT_SECTIONS( $OBJECTS(.gdtl) $LIBRARIES(.gdtl) )
            INPUT_SECTIONS( $OBJECTS(vtbl) $LIBRARIES(vtbl) )
            INPUT_SECTIONS( $OBJECTS(.frt) $LIBRARIES(.frt) )
            INPUT_SECTIONS( $OBJECTS(.frtl) $LIBRARIES(.frtl) )
#endif	/* } */
            INPUT_SECTIONS( $OBJECTS(data1) $LIBRARIES(data1))
            INPUT_SECTIONS( $OBJECTS(cplb_data) $LIBRARIES(cplb_data))
            INPUT_SECTIONS( $OBJECTS(voldata) $LIBRARIES(voldata))
            INPUT_SECTIONS( $OBJECTS(constdata) $LIBRARIES(constdata))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS(.edt) $LIBRARIES(.edt) )
            INPUT_SECTIONS( $OBJECTS(.cht) $LIBRARIES(.cht) )
#endif
        } >MEM_A_L1_DATA_B

        bsz_L1_data_b ZERO_INIT {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(bsz) $LIBRARIES(bsz))
        } >MEM_A_L1_DATA_B

        l2_sram_a {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(L2_sram_a) $LIBRARIES(L2_sram_a))
            INPUT_SECTIONS( $OBJECTS(noncache_code) $LIBRARIES(noncache_code))
            INPUT_SECTIONS( $OBJECTS(bsz_init) $LIBRARIES(bsz_init))
#if defined(__ADI_MULTICORE) /* { */
             INPUT_SECTIONS( $OBJECTS(mc_data) $LIBRARIES(mc_data))
#endif /* __ADI_MULTICORE } */
            INPUT_SECTIONS( $OBJECTS(program) $LIBRARIES(program))
            INPUT_SECTIONS( $OBJECTS(cplb) $LIBRARIES(cplb))
            INPUT_SECTIONS( $OBJECTS(cplb_code) $LIBRARIES(cplb_code))
            INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
            INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
            INPUT_SECTIONS( $OBJECTS(cplb_data) $LIBRARIES(cplb_data))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS(.edt) $LIBRARIES(.edt) )
            INPUT_SECTIONS( $OBJECTS(.cht) $LIBRARIES(.cht) )
#endif /* } */
            INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
        } >MEM_L2_SRAM_A
        .meminit { ALIGN(4) } >MEM_L2_SRAM_A

        bsz_L2_sram_a ZERO_INIT {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(bsz) $LIBRARIES(bsz))
        } >MEM_L2_SRAM_A

        stack {
            ldf_stack_space = .;
            ldf_stack_end = ldf_stack_space + MEMORY_SIZEOF(MEM_A_L1_STACK);
        } >MEM_A_L1_STACK

#ifndef USE_CACHE
        heap {
            // Allocate a heap for the application
            ldf_heap_space = .;
            ldf_heap_end = ldf_heap_space + MEMORY_SIZEOF(MEM_L2_HEAP_A) - 1;
            ldf_heap_length = ldf_heap_end - ldf_heap_space;        
        } >MEM_L2_HEAP_A
#else
        heap {
            // Allocate a heap for the application
            ldf_heap_space = .;
            ldf_heap_end = ldf_heap_space + MEMORY_SIZEOF(MEM_SDRAM0_BANK0) - 1;
            ldf_heap_length = ldf_heap_end - ldf_heap_space;        
        } >MEM_SDRAM0_BANK0
#endif

        l2_shared {
            // Contains data shared between cores - Requires use of resolve.
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(l2_shared) $LIBRARIES(l2_shared))

            // Holds control variable used to ensure atomic file I/O
            // Must be in shared memory and NOT cached.
            INPUT_SECTIONS( $LIBRARIES(primio_atomic_lock))
        } >MEM_L2_SRAM

        sdram0_bank1 {
          // Data
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($OBJECTS(sdram_data) $LIBRARIES(sdram_data))
          INPUT_SECTIONS($OBJECTS(data1) $LIBRARIES(data1))
          INPUT_SECTIONS($OBJECTS(voldata) $LIBRARIES(voldata))
        } >MEM_SDRAM0_BANK1

        sdram0_bank2 {
          // Data
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES(sdram0))
          INPUT_SECTIONS($OBJECTS(constdata) $LIBRARIES(constdata))
        } > MEM_SDRAM0_BANK2

        sdram0_bank2_bsz ZERO_INIT {
          // Bsz
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($OBJECTS(bsz) $LIBRARIES(bsz))
        } > MEM_SDRAM0_BANK2

        sdram0_bank3 {
          // Program Section
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS( $OBJECTS(program) $LIBRARIES(program))
          INPUT_SECTIONS( $OBJECTS(noncache_code) $LIBRARIES(noncache_code))
        } >MEM_SDRAM0_BANK3

        sdram_shared {
          // Shared section of SDRAM for both cores.
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS( $OBJECTS(sdram_shared))
        } >MEM_SDRAM1_SHARED
    }
}
#endif
 
