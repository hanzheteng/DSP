/*
** LDF for adsp-BF561
** 
** There are a number of configuration options that can be specified
** either by compiler flags, or by linker flags directly. The options are:
** 
** USE_PROFILER0
** 	Enabled by -p. Link in profiling library, and write results to
** 	both stdout and mon.out.
** USE_PROFILER1
** 	Enabled by -p1. Only write profiling data to mon.out.
** USE_PROFILER2
** 	Enabled by -p2. Only write profiling data to stdout.
** __WORKAROUNDS_ENABLED
**    Defined by compiler when -workaround is used to direct LDF to
**    link with libraries that have been built with work-arounds
**    enabled.
** USE_FILEIO
**	   Always defined; enables the File I/O Support, which is necessary
**	   for printf() to produce any output.
** USER_CRT
**   Specifies a custom or System Builder generated CRT object to use.
** _ADI_LIBIO
**   Use the ADI io library (default and fast)
** _DINKUM_IO
**   Use dinkum io library (slower but more compatible). Enabled
**   by the flag -full-io
** Builds for both Core A (p0.dxe) and Core B (p1.dxe)
** and a shared memory for the two common areas (sml2.sm) at
** the same time. Requires a main project/sub-project
** arrangement, where each sub-project generates a
** .dlb library to be linked against in the main
** project. The names of these .dlb files is fixed.
** They are: corea.dlb, coreb.dlb, sml2.dlb and sml3.dlb.
** 
*/

ARCHITECTURE(ADSP-BF561)

#ifndef __NO_STD_LIB
SEARCH_DIR( $ADI_DSP/Blackfin/lib )
#endif

# if defined(USE_INSTRUCTION_CACHE) || \
     defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE)
#  define USE_CACHE_PARTS 1
# else
#  define USE_CACHE_PARTS 0
#endif

#define INSTR_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_INSTRUCTION_CACHE) || !USE_CACHE_PARTS ) ) )

#define DATAA_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE) || \
         !USE_CACHE_PARTS ) ) )

#define DATAB_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_DATA_B_CACHE) || !USE_CACHE_PARTS ) ) )

# if defined(USE_INSTRUCTION_CACHE) || \
     defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE)
#  define USE_CACHE_PARTS 1
# else
#  define USE_CACHE_PARTS 0
#endif


#if defined(USE_PROFILER0) || \
    defined(USE_PROFILER1) || \
    defined(USE_PROFILER2)
#  if !defined(USE_PROFILER)
#    define USE_PROFILER
#  endif
   // The profiler needs File I/O to write its results.
#  define USE_FILEIO 1
#else
#  define PROFFLAG
#endif

#ifndef USE_FILEIO   /* { */
#define USE_FILEIO 1
#endif   /* } */

#ifdef USE_PROFILER0	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define PROFFLAG , prfflg0_561y.doj
#else
#define PROFFLAG , prfflg0_561.doj
#endif	/* } */
#endif	/* } */

#ifdef USE_PROFILER1	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define PROFFLAG , prfflg1_561y.doj
#else
#define PROFFLAG , prfflg1_561.doj
#endif	/* } */
#endif	/* } */

#ifdef USE_PROFILER2	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define PROFFLAG , prfflg2_561y.doj
#else
#define PROFFLAG , prfflg2_561.doj
#endif	/* } */
#endif	/* } */

#ifdef __WORKAROUNDS_ENABLED	/* { */
#define OMEGA idle561y.doj
#else
#define OMEGA idle561.doj
#endif	/* } */

#define MEMINIT __initsbsz561.doj,
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define LIBSMALL libsmall561y.dlb,
#define FLT64  libf64ieee561y.dlb
#else
#define LIBSMALL libsmall561.dlb,
#define FLT64  libf64ieee561.dlb
#endif	/* } */

#ifdef M3_RESERVED	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define LIBM3 libm3res561y.dlb
#define LIBDSP libdspm3res561y.dlb
#define SFTFLT libsftflt561y.dlb
#else
#define LIBM3 libm3res561.dlb
#define LIBDSP libdspm3res561.dlb
#define SFTFLT libsftflt561.dlb
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define LIBM3 libm3free561y.dlb
#define LIBDSP libdsp561y.dlb
#define SFTFLT libsftflt561y.dlb
#else
#define LIBM3 libm3free561.dlb
#define LIBDSP libdsp561.dlb
#define SFTFLT libsftflt561.dlb
#endif	/* } */
#endif	/* } */

#ifdef IEEEFP	/* { */
#define FPLIBS SFTFLT, FLT64, LIBDSP
#else
#define FPLIBS FLT64, LIBDSP, SFTFLT
#endif	/* } */


#ifdef __ADI_MULTICORE
#ifdef __WORKAROUNDS_ENABLED
#define MC_DATA mc_data561y.doj
#ifdef _DINKUM_IO
#define MC_LIBS libmc561y.dlb, libc561mty.dlb, librt_fileio561mty.dlb, libio561_mty.dlb
#else //_DINKUM_IO
#define MC_LIBS libio561_mty.dlb, libmc561y.dlb, libc561mty.dlb
#endif
#else //__WORKAROUNDS_ENABLED
#define MC_DATA mc_data561.doj
#ifdef _DINKUM_IO
#define MC_LIBS libmc561.dlb, libc561mt.dlb, librt_fileio561mt.dlb, libio561_mt.dlb
#else //_DINKUM_IO
#define MC_LIBS libio561_mt.dlb, libmc561.dlb, libc561mt.dlb
#endif
#endif
#endif

#ifdef __ADI_MULTICORE
#ifdef __WORKAROUNDS_ENABLED	/* { */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mty.dlb, libx561mty.dlb, libio561_mty.dlb, libcpp561mtyx.dlb, libcpprt561mtyx.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mty.dlb, libx561mty.dlb, libio561_mty.dlb, libcpp561mty.dlb, libcpprt561mty.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#endif /* __ADI_LIBEH__ */
#else /* __WORKAROUNDS_ENABLED */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mt.dlb, libx561mt.dlb, libio561_mt.dlb, libcpp561xmt.dlb, libcpprt561xmt.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBM3, libevent561mt.dlb, libx561mt.dlb, libio561_mt.dlb, libcpp561mt.dlb, libcpprt561mt.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#endif /* } __ADI_LIBEH__ */
#endif	/* }  __WORKAROUNDS_ENABLED */

#else /* __ADI_MULTICORE */

#ifdef __WORKAROUNDS_ENABLED
#ifdef _DINKUM_IO
#define LIBC libc561y.dlb, librt_fileio561y.dlb, libio561y.dlb,
#else //_DINKUM_IO
#define LIBC libio561y.dlb, libc561y.dlb,
#endif
#else //__WORKAROUNDS_ENABLED
#ifdef _DINKUM_IO
#define LIBC libc561.dlb, librt_fileio561.dlb, libio561.dlb,
#else //_DINKUM_IO
#define LIBC libio561.dlb, libc561.dlb,
#endif
#endif

#ifdef __WORKAROUNDS_ENABLED	/* { */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561y.dlb, libx561y.dlb, libcpp561yx.dlb, libcpprt561yx.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561y.dlb, libx561y.dlb, libcpp561y.dlb, libcpprt561y.dlb, FPLIBS, libetsi561y.dlb, libssl561y.dlb, libdrv561y.dlb, OMEGA
#endif /* __ADI_LIBEH__ */
#else /* __WORKAROUNDS_ENABLED */
#ifdef __ADI_LIBEH__
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561.dlb, libx561.dlb, libcpp561x.dlb, libcpprt561x.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#else /* __ADI_LIBEH__ */
#define LIBS LIBSMALL MEMINIT LIBC LIBM3, libevent561.dlb, libx561.dlb, libcpp561.dlb, libcpprt561.dlb, FPLIBS, libetsi561.dlb, libssl561.dlb, libdrv561.dlb, OMEGA
#endif /* } __ADI_LIBEH__ */
#endif	/* }  __WORKAROUNDS_ENABLED */
#endif      /* __ADI_MULTICORE */

#if defined(USE_FILEIO) || defined(USE_PROFGUIDE)
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define RTLIB librt_fileio561y.dlb
#else
#define RTLIB librt_fileio561.dlb
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define RTLIB librt561y.dlb
#else
#define RTLIB librt561.dlb
#endif	/* } */
#endif	/* } */
$LIBRARIES_CORE_A = corea.dlb, LIBS, RTLIB;
$LIBRARIES_CORE_B = coreb.dlb, LIBS, RTLIB;
/*
#if defined(__ADI_MULTICORE)
$LIBRARIES_SML2 = MC_DATA, sml2.dlb, MC_LIBS, LIBS, RTLIB;
#else
$LIBRARIES_SML2 = sml2.dlb, LIBS, RTLIB;
#endif
$LIBRARIES_SML3 = sml3.dlb, LIBS, RTLIB;
*/
// Libraries from the command line are included in COMMAND_LINE_OBJECTS.

// If USER_CRT is defined to be a custom/SystemBuilder generated
// CRT file then link with that, otherwise determine which of the
// precompiled objects to use.
#ifdef USER_CRT /* { */
#ifdef __WORKAROUNDS_ENABLED /* { */
#define CRT USER_CRT, libprofile561y.dlb PROFFLAG
#else
#define CRT USER_CRT, libprofile561.dlb PROFFLAG
#endif /* } */
#else
#ifdef USE_PROFILER	/* { */
#ifdef USE_FILEIO	/* { */
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtsfpc561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtsfpc561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtsfp561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtsfp561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#endif  /* __cplusplus */	/* } */
#else
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtscp561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtscp561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT crtsp561y.doj, libprofile561y.dlb PROFFLAG
#else
#define CRT crtsp561.doj, libprofile561.dlb PROFFLAG
#endif	/* } */
#endif  /* __cplusplus */	/* } */
#endif  /* USE_FILEIO */	/* } */
#else
#ifdef USE_FILEIO	/* { */
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT  crtsfc561y.doj
#else
#define CRT  crtsfc561.doj
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT  crtsf561y.doj
#else
#define CRT  crtsf561.doj
#endif	/* } */
#endif /* __cplusplus */	/* } */
#else
#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT  crtsc561y.doj
#else
#define CRT  crtsc561.doj
#endif	/* } */
#else
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define CRT	crts561y.doj
#else
#define CRT	crts561.doj
#endif	/* } */
#endif /* __cplusplus */	/* } */
#endif  /* USE_FILEIO */	/* } */
#endif  /* USE_PROFILER */	/* } */
#endif /* USER_CRT } */

#ifdef __cplusplus	/* { */
#ifdef __WORKAROUNDS_ENABLED	/* { */
#define ENDCRT , crtn561y.doj
#else
#define ENDCRT , crtn561.doj
#endif	/* } */
#else
#define ENDCRT
#endif	/* } */
$OBJECTS_CORE_A = CRT, $COMMAND_LINE_OBJECTS ,cplbtab561a.doj ENDCRT;
$OBJECTS_CORE_B = CRT, $COMMAND_LINE_OBJECTS ,cplbtab561b.doj ENDCRT;
$OBJECTS = $COMMAND_LINE_OBJECTS;


MEMORY
 /* L2 SRAM - 128K. */{
MEM_L2_SRAM    { START(0xFEB00000) END(0xFEB1FFFF) TYPE(RAM) WIDTH(8) }
 /* Async Memory in Banks of 64 MB */
MEM_ASYNC3     { START(0x2C000000) END(0x2FFFFFFF) TYPE(RAM) WIDTH(8) }
MEM_ASYNC2     { START(0x28000000) END(0x2BFFFFFF) TYPE(RAM) WIDTH(8) }
MEM_ASYNC1     { START(0x24000000) END(0x27FFFFFF) TYPE(RAM) WIDTH(8) }
MEM_ASYNC0     { START(0x20000000) END(0x23FFFFFF) TYPE(RAM) WIDTH(8) }

/* Claim some of SDRAM Bank 0 for heap */
/* since it needs a separate section */
#if !defined(PARTITION_EZKIT_SDRAM)
# define PARTITION_EZKIT_SDRAM
#endif
MEM_SDRAM0_BANK3  { START(0x03000000) END(0x03FFFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM0_BANK2  { START(0x02000000) END(0x02FFFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM0_BANK1  { START(0x01000000) END(0x01FFFFFF) TYPE(RAM) WIDTH(8) }
/*  Declare heap for both cores in bank 0. If __ADI_MULTICORE is 
 ** defined we use a shared heap. If not, each core has it's own space.
 */
#if defined(__ADI_MULTICORE)
/*  16 MB Heap is to be shared between both cores. It must reside in a
 ** Shared memory location, and can only be accessed using the
 ** re-entrant safe libraries.
 */
MEM_SDRAM0_HEAP   { START(0x00000004) END(0x00FFFFFF) TYPE(RAM) WIDTH(8) }
#else
/*  A separate 8 MB heapspace is allocated for each core.
 ** The heaps should only be accessed by the correct core.
 ** Re-entrant safe libraries do not need to be used.
 */
MEM_SDRAM0_HEAP_A { START(0x00000004) END(0x007FFFFF) TYPE(RAM) WIDTH(8) }
MEM_SDRAM0_HEAP_B { START(0x00800000) END(0x00FFFFFF) TYPE(RAM) WIDTH(8) }
#endif
}
SHARED_MEMORY
{
//	OUTPUT($COMMAND_LINE_OUTPUT_DIRECTORY/sml2.sm)
  // SECTIONS 
   {
#if defined(__WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES) /* { */
    /* Workaround for hardware errata 05-00-0189 -
    ** "Speculative (and fetches made at boundary of reserved memory
    ** space) for instruction or data fetches may cause false
    ** protection exceptions".
    **
    ** Done by avoiding use of 76 bytes from at the end of blocks
    ** that are adjacent to reserved memory. Workaround is enabled
    ** for appropriate silicon revisions (-si-revision switch).
    */
    RESERVE(___wab7=0xFEB1FFFF - 75,___l7=76)     /* L2 sram */
    RESERVE(___wab8=0x2FFFFFFF - 75,___l8=76)     /* async bank 3 */
#  if defined(PARTITION_EZKIT_SDRAM)
    RESERVE(___wab9=0x3FFFFFF - 75,___l9=76)      /* EZ-Kit sdram */
#  elif defined(USE_CACHE) || defined(USE_SDRAM)
    RESERVE(___wab10=0x7FFFFFF - 75,___l10=76)    /* sdram */
#  endif
#else 
    /* FEB1FC00->FEB1FFFF : Reseved in boot Phase for 2nd stage boot loader */
    RESERVE(___ssld=0xFEB1FC00,___lssld=0x400) 
#endif /*} __WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES */

        l2_sram
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS(l2_sram) $LIBRARIES_SML2(l2_sram))
#if defined(__ADI_MULTICORE)
            INPUT_SECTIONS( $OBJECTS(mc_data) $LIBRARIES_SML2(mc_data))
#endif
            // Holds control variable used to ensure atomic file I/O
            // Must be in shared memory and NOT cached.
            INPUT_SECTIONS( $LIBRARIES_SML2(primio_atomic_lock))

            INPUT_SECTIONS( $LIBRARIES_SML2(noncache_code))
            INPUT_SECTIONS( $LIBRARIES_SML2(program))
            INPUT_SECTIONS( $LIBRARIES_SML2(data1))
            INPUT_SECTIONS( $LIBRARIES_SML2(constdata))
            INPUT_SECTIONS( $OBJECTS(voldata) $LIBRARIES_SML2(voldata))
        } >MEM_L2_SRAM

        l2_bsz ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $LIBRARIES_SML2(bsz))
        } >MEM_L2_SRAM

        sdram0_bank1 {               // Data
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($OBJECTS(sdram_data) $LIBRARIES_SML3(sdram_data))
          INPUT_SECTIONS($LIBRARIES_SML3(data1))
          INPUT_SECTIONS($LIBRARIES_SML3(voldata))
        } >MEM_SDRAM0_BANK1

        sdram0_bank2 {               // Data
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($OBJECTS(sdram0) $LIBRARIES_SML3(sdram0))
          INPUT_SECTIONS($LIBRARIES_SML3(constdata))
          INPUT_SECTIONS($LIBRARIES_SML2(bsz_init) $LIBRARIES_SML3(bsz_init))
        } > MEM_SDRAM0_BANK2

        sdram0_bank2_bsz ZERO_INIT { // Bsz
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($LIBRARIES_SML3(bsz))
        } > MEM_SDRAM0_BANK2

        .meminit { ALIGN(4) } >MEM_SDRAM0_BANK2

        sdram0_bank3 {               // Program Section
          INPUT_SECTION_ALIGN(4)
          INPUT_SECTIONS($LIBRARIES_SML3(program))
          INPUT_SECTIONS($LIBRARIES_SML3(noncache_code))
        } >MEM_SDRAM0_BANK3

#if defined(__ADI_MULTICORE)
        heap {                      // Allocate a heap for the application
            ldf_heap_space = .;
            ldf_heap_end = ldf_heap_space + MEMORY_SIZEOF(MEM_SDRAM0_HEAP) - 1;
            ldf_heap_length = ldf_heap_end - ldf_heap_space;        
        } >MEM_SDRAM0_HEAP
#endif
   }
}

/* Core A */
PROCESSOR p0
{
MEMORY
{
/* ----- Core A ----- */
MEM_A_L1_SCRATCH {	/* L1 Scratchpad - 4K */
	TYPE(RAM) WIDTH(8)
	START(0xFFB00000) END(0xFFB00FFF)
}
MEM_A_L1_CODE_CACHE  {	/* Instruction SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFFA10000) END(0xFFA13FFF)
}
MEM_A_L1_CODE {		/* Instruction SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFFA00000) END(0xFFA03FFF)
}
#if DATAB_CACHE /* { */
MEM_A_L1_DATA_B_CACHE {	/* Data Bank B SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF904000) END(0xFF907FFF)
}
MEM_A_L1_DATA_B   {		/* Data Bank B SRAM - 12K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF901000) END(0xFF903FFF)
}
#else  /* } { DATAB_CACHE */
MEM_A_L1_DATA_B   {		/* Data Bank B SRAM - 28K of 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF901000) END(0xFF907FFF)
}
#endif /* } DATAB_CACHE */
MEM_A_L1_STACK    {		/* Data Bank B SRAM - 4K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF900000) END(0xFF900FFF)
}
#if DATAA_CACHE /* { */
MEM_A_L1_DATA_A_CACHE {	/* Data Bank A SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF804000) END(0xFF807FFF)
}
MEM_A_L1_DATA_A   {		/* Data Bank A SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF800000) END(0xFF803FFF)
}
#else  /* } { DATAA_CACHE */
MEM_A_L1_DATA_A   {		/* Data Bank A SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF800000) END(0xFF807FFF)
}
#endif /* } DATAA_CACHE */
}
    OUTPUT( $COMMAND_LINE_OUTPUT_DIRECTORY/p0.dxe )

	/* Following address must match start of MEM_A_L1_CODE */
	RESOLVE(start,0xFFA00000)
	KEEP(start,_main)
	//LINK_AGAINST($COMMAND_LINE_OUTPUT_DIRECTORY/sml2.sm)

   SECTIONS
   {
#if defined(__WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES) /* { */
    /* Workaround for hardware errata 05-00-0189 -
    ** "Speculative (and fetches made at boundary of reserved memory
    ** space) for instruction or data fetches may cause false
    ** protection exceptions".
    **
    ** Done by avoiding use of 76 bytes from at the end of blocks
    ** that are adjacent to reserved memory. Workaround is enabled
    ** for appropriate silicon revisions (-si-revision switch).
    */
    RESERVE(___waba0=0xFFB00FFF - 75,___la0=76)   /* scratchpad */
#  if !INSTR_CACHE
    RESERVE(___waba1=0xFFA13FFF - 75,___la1=76)   /* l1 instr sram/cache */
#  endif
    RESERVE(___waba2=0xFFA03FFF - 75,___la2=76)   /* l1 instr sram */
#  if DATAB_CACHE
    RESERVE(___waba3=0xFF903FFF - 75,___la3=76)   /* data B sram */
#  else
    RESERVE(___waba4=0xFF907FFF - 75,___la4=76)   /* data B sram/cache */
#  endif
#  if DATAA_CACHE
    RESERVE(___waba5=0xFF803FFF - 75,___la5=76)   /* data A sram */
#  else
    RESERVE(___waba6=0xFF807FFF - 75,___la6=76)   /* data A sram/cache */
#  endif
#endif /*} __WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES */

        l1_code
        {
            INPUT_SECTION_ALIGN(4)
            __CORE = 0;
            INPUT_SECTIONS( $OBJECTS_CORE_A(L1_code) $LIBRARIES_CORE_A(L1_code))
            INPUT_SECTIONS( $OBJECTS_CORE_A(cplb) $LIBRARIES_CORE_A(cplb))
            INPUT_SECTIONS( $OBJECTS_CORE_A(cplb_code) $LIBRARIES_CORE_A(cplb_code))
            INPUT_SECTIONS( $OBJECTS_CORE_A(noncache_code) $LIBRARIES_CORE_A(noncache_code))
            INPUT_SECTIONS( $OBJECTS_CORE_A(program) $LIBRARIES_CORE_A(program))
        } >MEM_A_L1_CODE

        l1_code_cache
        {
#if INSTR_CACHE /* { */
            ___l1_code_cache = 1;
#else
            ___l1_code_cache = 0;
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS_CORE_A(L1_code) $LIBRARIES_CORE_A(L1_code))
            INPUT_SECTIONS( $OBJECTS_CORE_A(cplb) $LIBRARIES_CORE_A(cplb))
            INPUT_SECTIONS( $OBJECTS_CORE_A(cplb_code) $LIBRARIES_CORE_A(cplb_code))
            INPUT_SECTIONS( $OBJECTS_CORE_A(program) $LIBRARIES_CORE_A(program))
#endif /* INSTR_CACHE } */
        } >MEM_A_L1_CODE_CACHE

#if DATAA_CACHE /* { */
        l1_data_a_cache
        {
            INPUT_SECTION_ALIGN(4)
            ___l1_data_cache_a = 1;
        } >MEM_A_L1_DATA_A_CACHE
#endif /* DATAA_CACHE } */

        l1_data_a
        {
            INPUT_SECTION_ALIGN(4)
#if !DATAA_CACHE /* { */
            ___l1_data_cache_a = 0;
#endif /* } DATAA_CACHE */
            INPUT_SECTIONS( $OBJECTS_CORE_A(L1_data_a) $LIBRARIES_CORE_A(L1_data_a))
            INPUT_SECTIONS( $OBJECTS_CORE_A(bsz_init) $LIBRARIES_CORE_A(bsz_init))
            INPUT_SECTIONS( $OBJECTS_CORE_A(cplb_data) $LIBRARIES_CORE_A(cplb_data))
            INPUT_SECTIONS($OBJECTS_CORE_A(voldata) $LIBRARIES_CORE_A(voldata))
            INPUT_SECTIONS($OBJECTS_CORE_A(constdata) $LIBRARIES_CORE_A(constdata))
            INPUT_SECTIONS($OBJECTS_CORE_A(data1) $LIBRARIES_CORE_A(data1))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS_CORE_A(.edt) $LIBRARIES_CORE_A(.edt) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(.cht) $LIBRARIES_CORE_A(.cht) )
#endif	/* } */
        } >MEM_A_L1_DATA_A
        .meminit{ ALIGN(4) } >MEM_A_L1_DATA_A

#if DATAB_CACHE /* { */
        l1_data_b_cache
        {
            INPUT_SECTION_ALIGN(4)
            ___l1_data_cache_b = 1;
        } >MEM_A_L1_DATA_B_CACHE
#endif /* DATAB_CACHE } */

        l1_data_b
        {
            INPUT_SECTION_ALIGN(4)
#if !DATAB_CACHE /* { */
            ___l1_data_cache_b = 0;
#endif /* DATAB_CACHE } */
            INPUT_SECTIONS( $OBJECTS_CORE_A(L1_data_b) $LIBRARIES_CORE_A(L1_data_b))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS_CORE_A(ctor) $LIBRARIES_CORE_A(ctor) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(ctorl) $LIBRARIES_CORE_A(ctorl) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(.gdt) $LIBRARIES_CORE_A(.gdt) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(.gdtl) $LIBRARIES_CORE_A(.gdtl) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(vtbl) $LIBRARIES_CORE_A(vtbl) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(.frt) $LIBRARIES_CORE_A(.frt) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(.frtl) $LIBRARIES_CORE_A(.frtl) )
#endif	/* } */
            INPUT_SECTIONS($OBJECTS_CORE_A(data1) $LIBRARIES_CORE_A(data1))
            INPUT_SECTIONS( $OBJECTS_CORE_A(cplb_data) $LIBRARIES_CORE_A(cplb_data))
            INPUT_SECTIONS($OBJECTS_CORE_A(voldata) $LIBRARIES_CORE_A(voldata))
            INPUT_SECTIONS($OBJECTS_CORE_A(constdata) $LIBRARIES_CORE_A(constdata))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS_CORE_A(.edt) $LIBRARIES_CORE_A(.edt) )
            INPUT_SECTIONS( $OBJECTS_CORE_A(.cht) $LIBRARIES_CORE_A(.cht) )
#endif	/* } */
        } >MEM_A_L1_DATA_B

        bsz_L1_data_a ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS_CORE_A(bsz) $LIBRARIES_CORE_A(bsz))
        } >MEM_A_L1_DATA_A

        bsz_L1_data_b ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS_CORE_A(bsz) $LIBRARIES_CORE_A(bsz))
        } >MEM_A_L1_DATA_B

        stack
        {
            ldf_stack_space = .;
            ldf_stack_end = ldf_stack_space + MEMORY_SIZEOF(MEM_A_L1_STACK);
        } >MEM_A_L1_STACK

#if !defined(__ADI_MULTICORE)
        heap
        {
            // Allocate a heap for the application
            ldf_heap_space = .;
            ldf_heap_end = ldf_heap_space + MEMORY_SIZEOF(MEM_SDRAM0_HEAP_A) - 1;
            ldf_heap_length = ldf_heap_end - ldf_heap_space;        
        } >MEM_SDRAM0_HEAP_A
#endif
    }
}

/* Core B */
PROCESSOR p1
{
MEMORY {
/* ----- Core B ----- */
MEM_B_L1_SCRATCH {		/* L1 Scratchpad - 4K */
	TYPE(RAM) WIDTH(8)
	START(0xFF700000) END(0xFF700FFF)
}
MEM_B_L1_CODE_CACHE  {	/* L1 Instruction SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF610000) END(0xFF613FFF)
}
MEM_B_L1_CODE {		/* L1 Instruction SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF600000) END(0xFF603FFF)
}
#if DATAB_CACHE /* { */
MEM_B_L1_DATA_B_CACHE {	/* L1 Data Bank B SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF504000) END(0xFF507FFF)
}
MEM_B_L1_DATA_B   {		/* L1 Data Bank B SRAM - 12K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF501000) END(0xFF503FFF)
}
#else  /* } {  DATAB_CACHE */
MEM_B_L1_DATA_B   {		/* L1 Data Bank B SRAM - 28K of 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF501000) END(0xFF507FFF)
}
#endif /* } DATAB_CACHE */
MEM_B_L1_STACK    {		/* L1 Data Bank B SRAM - 4K of 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF500000) END(0xFF500FFF)
}
#if DATAA_CACHE /* { */
MEM_B_L1_DATA_A_CACHE {	/* L1 Data Bank A SRAM/Cache - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF404000) END(0xFF407FFF)
}
MEM_B_L1_DATA_A   {		/* L1 Data Bank A SRAM - 16K */
	TYPE(RAM) WIDTH(8)
	START(0xFF400000) END(0xFF403FFF)
}
#else  /* } {  DATAA_CACHE */
MEM_B_L1_DATA_A   {		/* L1 Data Bank A SRAM - 32K */
	TYPE(RAM) WIDTH(8)
	START(0xFF400000) END(0xFF407FFF)
}
#endif /* } DATAA_CACHE */
}
    OUTPUT( $COMMAND_LINE_OUTPUT_DIRECTORY/p1.dxe )

	/* Following address must match start of MEM_B_L1_PROGRAM */
	RESOLVE(start,0xFF600000)
	KEEP(start,_main)
	//LINK_AGAINST($COMMAND_LINE_OUTPUT_DIRECTORY/sml2.sm)

   SECTIONS
   {
#if defined(__WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES) /* { */
    /* Workaround for hardware errata 05-00-0189 -
    ** "Speculative (and fetches made at boundary of reserved memory
    ** space) for instruction or data fetches may cause false
    ** protection exceptions".
    **
    ** Done by avoiding use of 76 bytes from at the end of blocks
    ** that are adjacent to reserved memory. Workaround is enabled
    ** for appropriate silicon revisions (-si-revision switch).
    */
    RESERVE(___wabb0=0xFF700FFF - 75,___lb0=76)   /* scratchpad */
#  if !INSTR_CACHE
    RESERVE(___wabb1=0xFF613FFF - 75,___lb1=76)   /* l1 instr sram/cache */
#  endif
    RESERVE(___wabb2=0xFF603FFF - 75,___lb2=76)   /* l1 instr sram */
#  if DATAB_CACHE
    RESERVE(___wabb3=0xFF503FFF - 75,___lb3=76)   /* data B sram */
#  else
    RESERVE(___wabb4=0xFF507FFF - 75,___lb4=76)   /* data B sram/cache */
#  endif
#  if DATAA_CACHE
    RESERVE(___wabb5=0xFF403FFF - 75,___lb5=76)   /* data A sram */
#  else
    RESERVE(___wabb6=0xFF407FFF - 75,___lb6=76)   /* data A sram/cache */
#  endif
#endif /*} __WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES */

        l1_code
        {
            INPUT_SECTION_ALIGN(4)
            __CORE = 1;
            INPUT_SECTIONS( $OBJECTS_CORE_B(L1_code) $LIBRARIES_CORE_B(L1_code))
            INPUT_SECTIONS( $OBJECTS_CORE_B(cplb) $LIBRARIES_CORE_B(cplb))
            INPUT_SECTIONS( $OBJECTS_CORE_B(cplb_code) $LIBRARIES_CORE_B(cplb_code))
            INPUT_SECTIONS( $OBJECTS_CORE_B(noncache_code) $LIBRARIES_CORE_B(noncache_code))
            INPUT_SECTIONS( $OBJECTS_CORE_B(program) $LIBRARIES_CORE_B(program))
        } >MEM_B_L1_CODE

        l1_code_cache
        {
            INPUT_SECTION_ALIGN(4)
#if INSTR_CACHE /* { */
            ___l1_code_cache = 1;
#else
            ___l1_code_cache = 0;
            INPUT_SECTIONS( $OBJECTS_CORE_B(L1_code) $LIBRARIES_CORE_B(L1_code))
            INPUT_SECTIONS( $OBJECTS_CORE_B(cplb_code) $LIBRARIES_CORE_B(cplb_code))
            INPUT_SECTIONS( $OBJECTS_CORE_B(cplb) $LIBRARIES_CORE_B(cplb))
            INPUT_SECTIONS( $OBJECTS_CORE_B(program) $LIBRARIES_CORE_B(program))
#endif /* INSTR_CACHE } */
        } >MEM_B_L1_CODE_CACHE

#if DATAA_CACHE /* { */
        l1_data_a_cache
        {
            INPUT_SECTION_ALIGN(4)
            ___l1_data_cache_a = 1;
        } >MEM_B_L1_DATA_A_CACHE
#endif /* DATAA_CACHE } */

        l1_data_a
        {
            INPUT_SECTION_ALIGN(4)
#if !DATAA_CACHE /* { */
            ___l1_data_cache_a = 0;
#endif /* } DATAA_CACHE */
            INPUT_SECTIONS( $OBJECTS_CORE_B(L1_data_a) $LIBRARIES_CORE_B(L1_data_a))
            INPUT_SECTIONS( $OBJECTS_CORE_B(bsz_init) $LIBRARIES_CORE_B(bsz_init))
            INPUT_SECTIONS( $OBJECTS_CORE_B(cplb_data) $LIBRARIES_CORE_B(cplb_data))
            INPUT_SECTIONS($OBJECTS_CORE_B(constdata) $LIBRARIES_CORE_B(constdata))
            INPUT_SECTIONS($OBJECTS_CORE_B(voldata) $LIBRARIES_CORE_B(voldata))
            INPUT_SECTIONS($OBJECTS_CORE_B(data1) $LIBRARIES_CORE_B(data1))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS_CORE_B(.edt) $LIBRARIES_CORE_B(.edt) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(.cht) $LIBRARIES_CORE_B(.cht) )
#endif	/* } */
        } >MEM_B_L1_DATA_A
        .meminit{ ALIGN(4) } >MEM_B_L1_DATA_A

        bsz_L1_data_a ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS_CORE_B(bsz) $LIBRARIES_CORE_B(bsz))
        } >MEM_B_L1_DATA_A

#if DATAB_CACHE /* { */
        l1_data_b_cache
        {
            INPUT_SECTION_ALIGN(4)
            ___l1_data_cache_b = 1;
        } >MEM_B_L1_DATA_B_CACHE
#endif /* DATAB_CACHE } */

        l1_data_b
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS_CORE_B(L1_data_b) $LIBRARIES_CORE_B(L1_data_b))
#if !DATAB_CACHE /* { */
            ___l1_data_cache_b = 0;
#endif /* } DATAB_CACHE */
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS_CORE_B(ctor) $LIBRARIES_CORE_B(ctor) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(ctorl) $LIBRARIES_CORE_B(ctorl) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(.gdt) $LIBRARIES_CORE_B(.gdt) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(.gdtl) $LIBRARIES_CORE_B(.gdtl) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(vtbl) $LIBRARIES_CORE_B(vtbl) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(.frt) $LIBRARIES_CORE_B(.frt) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(.frtl) $LIBRARIES_CORE_B(.frtl) )
#endif	/* } */
            INPUT_SECTIONS($OBJECTS_CORE_B(data1) $LIBRARIES_CORE_B(data1))
            INPUT_SECTIONS( $OBJECTS_CORE_B(cplb_data) $LIBRARIES_CORE_B(cplb_data))
            INPUT_SECTIONS($OBJECTS_CORE_B(constdata) $LIBRARIES_CORE_B(constdata))
            INPUT_SECTIONS($OBJECTS_CORE_B(voldata) $LIBRARIES_CORE_B(voldata))
#if defined(__cplusplus) || defined(USER_CRT)   /* { */
            INPUT_SECTIONS( $OBJECTS_CORE_B(.edt) $LIBRARIES_CORE_B(.edt) )
            INPUT_SECTIONS( $OBJECTS_CORE_B(.cht) $LIBRARIES_CORE_B(.cht) )
#endif	/* } */
        } >MEM_B_L1_DATA_B

        bsz_L1_data_b ZERO_INIT
        {
            INPUT_SECTION_ALIGN(4)
            INPUT_SECTIONS( $OBJECTS_CORE_B(bsz) $LIBRARIES_CORE_B(bsz))
        } >MEM_B_L1_DATA_B

        stack
        {
            ldf_stack_space = .;
            ldf_stack_end = ldf_stack_space + MEMORY_SIZEOF(MEM_B_L1_STACK);
        } >MEM_B_L1_STACK

#if !defined(__ADI_MULTICORE)
        heap
        {
            // Allocate a heap for the application
            ldf_heap_space = .;
            ldf_heap_end = ldf_heap_space + MEMORY_SIZEOF(MEM_SDRAM0_HEAP_B) - 1;
            ldf_heap_length = ldf_heap_end - ldf_heap_space;        
        } >MEM_SDRAM0_HEAP_B
#endif
    }
}

